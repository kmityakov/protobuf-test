// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: analytics.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct CommonProperties: SwiftProtobuf.Message {
  static let protoMessageName: String = "CommonProperties"

  //// Random UUID generated on client side 123e4567-e89b-12d3-a456-426655440000
  var eventID: String {
    get {return _storage._eventID ?? String()}
    set {_uniqueStorage()._eventID = newValue}
  }
  /// Returns true if `eventID` has been explicitly set.
  var hasEventID: Bool {return _storage._eventID != nil}
  /// Clears the value of `eventID`. Subsequent reads from it will return its default value.
  mutating func clearEventID() {_storage._eventID = nil}

  //// 8/6/2015 23:00:00
  var globalClientTimestamp: String {
    get {return _storage._globalClientTimestamp ?? String()}
    set {_uniqueStorage()._globalClientTimestamp = newValue}
  }
  /// Returns true if `globalClientTimestamp` has been explicitly set.
  var hasGlobalClientTimestamp: Bool {return _storage._globalClientTimestamp != nil}
  /// Clears the value of `globalClientTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearGlobalClientTimestamp() {_storage._globalClientTimestamp = nil}

  //// 8/6/2015 23:00:00
  var localClientTimestamp: String {
    get {return _storage._localClientTimestamp ?? String()}
    set {_uniqueStorage()._localClientTimestamp = newValue}
  }
  /// Returns true if `localClientTimestamp` has been explicitly set.
  var hasLocalClientTimestamp: Bool {return _storage._localClientTimestamp != nil}
  /// Clears the value of `localClientTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearLocalClientTimestamp() {_storage._localClientTimestamp = nil}

  //// PST
  var localClientTimezone: String {
    get {return _storage._localClientTimezone ?? String()}
    set {_uniqueStorage()._localClientTimezone = newValue}
  }
  /// Returns true if `localClientTimezone` has been explicitly set.
  var hasLocalClientTimezone: Bool {return _storage._localClientTimezone != nil}
  /// Clears the value of `localClientTimezone`. Subsequent reads from it will return its default value.
  mutating func clearLocalClientTimezone() {_storage._localClientTimezone = nil}

  //// Ashkon
  var firstName: String {
    get {return _storage._firstName ?? String()}
    set {_uniqueStorage()._firstName = newValue}
  }
  /// Returns true if `firstName` has been explicitly set.
  var hasFirstName: Bool {return _storage._firstName != nil}
  /// Clears the value of `firstName`. Subsequent reads from it will return its default value.
  mutating func clearFirstName() {_storage._firstName = nil}

  //// Nosrat
  var lastName: String {
    get {return _storage._lastName ?? String()}
    set {_uniqueStorage()._lastName = newValue}
  }
  /// Returns true if `lastName` has been explicitly set.
  var hasLastName: Bool {return _storage._lastName != nil}
  /// Clears the value of `lastName`. Subsequent reads from it will return its default value.
  mutating func clearLastName() {_storage._lastName = nil}

  //// ashkon.nostrat@mixpanel.com
  var email: String {
    get {return _storage._email ?? String()}
    set {_uniqueStorage()._email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  var hasEmail: Bool {return _storage._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
  mutating func clearEmail() {_storage._email = nil}

  //// (555) 555-555
  var phone: String {
    get {return _storage._phone ?? String()}
    set {_uniqueStorage()._phone = newValue}
  }
  /// Returns true if `phone` has been explicitly set.
  var hasPhone: Bool {return _storage._phone != nil}
  /// Clears the value of `phone`. Subsequent reads from it will return its default value.
  mutating func clearPhone() {_storage._phone = nil}

  //// 782958
  var mc: String {
    get {return _storage._mc ?? String()}
    set {_uniqueStorage()._mc = newValue}
  }
  /// Returns true if `mc` has been explicitly set.
  var hasMc: Bool {return _storage._mc != nil}
  /// Clears the value of `mc`. Subsequent reads from it will return its default value.
  mutating func clearMc() {_storage._mc = nil}

  //// 2298495
  var dot: String {
    get {return _storage._dot ?? String()}
    set {_uniqueStorage()._dot = newValue}
  }
  /// Returns true if `dot` has been explicitly set.
  var hasDot: Bool {return _storage._dot != nil}
  /// Clears the value of `dot`. Subsequent reads from it will return its default value.
  mutating func clearDot() {_storage._dot = nil}

  //// 1.20
  var expectedRpm: Float {
    get {return _storage._expectedRpm ?? 0}
    set {_uniqueStorage()._expectedRpm = newValue}
  }
  /// Returns true if `expectedRpm` has been explicitly set.
  var hasExpectedRpm: Bool {return _storage._expectedRpm != nil}
  /// Clears the value of `expectedRpm`. Subsequent reads from it will return its default value.
  mutating func clearExpectedRpm() {_storage._expectedRpm = nil}

  //// 8/6/2015 23:00:00
  var firstOpenDate: String {
    get {return _storage._firstOpenDate ?? String()}
    set {_uniqueStorage()._firstOpenDate = newValue}
  }
  /// Returns true if `firstOpenDate` has been explicitly set.
  var hasFirstOpenDate: Bool {return _storage._firstOpenDate != nil}
  /// Clears the value of `firstOpenDate`. Subsequent reads from it will return its default value.
  mutating func clearFirstOpenDate() {_storage._firstOpenDate = nil}

  //// 8/6/2015 23:00:00
  var lastOpenDate: String {
    get {return _storage._lastOpenDate ?? String()}
    set {_uniqueStorage()._lastOpenDate = newValue}
  }
  /// Returns true if `lastOpenDate` has been explicitly set.
  var hasLastOpenDate: Bool {return _storage._lastOpenDate != nil}
  /// Clears the value of `lastOpenDate`. Subsequent reads from it will return its default value.
  mutating func clearLastOpenDate() {_storage._lastOpenDate = nil}

  //// 8/6/2015 23:00:00, null if not signed up
  var signUpDate: String {
    get {return _storage._signUpDate ?? String()}
    set {_uniqueStorage()._signUpDate = newValue}
  }
  /// Returns true if `signUpDate` has been explicitly set.
  var hasSignUpDate: Bool {return _storage._signUpDate != nil}
  /// Clears the value of `signUpDate`. Subsequent reads from it will return its default value.
  mutating func clearSignUpDate() {_storage._signUpDate = nil}

  //// iPhone OS, Android
  var operatingSystem: String {
    get {return _storage._operatingSystem ?? String()}
    set {_uniqueStorage()._operatingSystem = newValue}
  }
  /// Returns true if `operatingSystem` has been explicitly set.
  var hasOperatingSystem: Bool {return _storage._operatingSystem != nil}
  /// Clears the value of `operatingSystem`. Subsequent reads from it will return its default value.
  mutating func clearOperatingSystem() {_storage._operatingSystem = nil}

  //// 34.052234 (Users latitude at the time of event)
  var userLatitude: Float {
    get {return _storage._userLatitude ?? 0}
    set {_uniqueStorage()._userLatitude = newValue}
  }
  /// Returns true if `userLatitude` has been explicitly set.
  var hasUserLatitude: Bool {return _storage._userLatitude != nil}
  /// Clears the value of `userLatitude`. Subsequent reads from it will return its default value.
  mutating func clearUserLatitude() {_storage._userLatitude = nil}

  //// -118.243685 (Users longitude at the time of event)
  var userLongitude: Float {
    get {return _storage._userLongitude ?? 0}
    set {_uniqueStorage()._userLongitude = newValue}
  }
  /// Returns true if `userLongitude` has been explicitly set.
  var hasUserLongitude: Bool {return _storage._userLongitude != nil}
  /// Clears the value of `userLongitude`. Subsequent reads from it will return its default value.
  mutating func clearUserLongitude() {_storage._userLongitude = nil}

  //// string length 10 symbols, i.e. 1234567890
  var userPhone: String {
    get {return _storage._userPhone ?? String()}
    set {_uniqueStorage()._userPhone = newValue}
  }
  /// Returns true if `userPhone` has been explicitly set.
  var hasUserPhone: Bool {return _storage._userPhone != nil}
  /// Clears the value of `userPhone`. Subsequent reads from it will return its default value.
  mutating func clearUserPhone() {_storage._userPhone = nil}

  //// 5.0.2
  var appVersion: String {
    get {return _storage._appVersion ?? String()}
    set {_uniqueStorage()._appVersion = newValue}
  }
  /// Returns true if `appVersion` has been explicitly set.
  var hasAppVersion: Bool {return _storage._appVersion != nil}
  /// Clears the value of `appVersion`. Subsequent reads from it will return its default value.
  mutating func clearAppVersion() {_storage._appVersion = nil}

  //// 0ZZdkOsAPg
  var internalUserID: String {
    get {return _storage._internalUserID ?? String()}
    set {_uniqueStorage()._internalUserID = newValue}
  }
  /// Returns true if `internalUserID` has been explicitly set.
  var hasInternalUserID: Bool {return _storage._internalUserID != nil}
  /// Clears the value of `internalUserID`. Subsequent reads from it will return its default value.
  mutating func clearInternalUserID() {_storage._internalUserID = nil}

  //// ios7.1, androidxxx 6, macosx10.7
  var deviceOs: String {
    get {return _storage._deviceOs ?? String()}
    set {_uniqueStorage()._deviceOs = newValue}
  }
  /// Returns true if `deviceOs` has been explicitly set.
  var hasDeviceOs: Bool {return _storage._deviceOs != nil}
  /// Clears the value of `deviceOs`. Subsequent reads from it will return its default value.
  mutating func clearDeviceOs() {_storage._deviceOs = nil}

  //// DFA ID and googleID
  var deviceID: String {
    get {return _storage._deviceID ?? String()}
    set {_uniqueStorage()._deviceID = newValue}
  }
  /// Returns true if `deviceID` has been explicitly set.
  var hasDeviceID: Bool {return _storage._deviceID != nil}
  /// Clears the value of `deviceID`. Subsequent reads from it will return its default value.
  mutating func clearDeviceID() {_storage._deviceID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._eventID == nil {return false}
      if _storage._globalClientTimestamp == nil {return false}
      if _storage._localClientTimestamp == nil {return false}
      if _storage._localClientTimezone == nil {return false}
      if _storage._firstOpenDate == nil {return false}
      if _storage._lastOpenDate == nil {return false}
      if _storage._operatingSystem == nil {return false}
      if _storage._appVersion == nil {return false}
      if _storage._internalUserID == nil {return false}
      if _storage._deviceOs == nil {return false}
      if _storage._deviceID == nil {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._eventID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._globalClientTimestamp)
        case 3: try decoder.decodeSingularStringField(value: &_storage._localClientTimestamp)
        case 4: try decoder.decodeSingularStringField(value: &_storage._localClientTimezone)
        case 5: try decoder.decodeSingularStringField(value: &_storage._firstName)
        case 6: try decoder.decodeSingularStringField(value: &_storage._lastName)
        case 7: try decoder.decodeSingularStringField(value: &_storage._email)
        case 8: try decoder.decodeSingularStringField(value: &_storage._phone)
        case 9: try decoder.decodeSingularStringField(value: &_storage._mc)
        case 10: try decoder.decodeSingularStringField(value: &_storage._dot)
        case 11: try decoder.decodeSingularFloatField(value: &_storage._expectedRpm)
        case 12: try decoder.decodeSingularStringField(value: &_storage._firstOpenDate)
        case 13: try decoder.decodeSingularStringField(value: &_storage._lastOpenDate)
        case 14: try decoder.decodeSingularStringField(value: &_storage._signUpDate)
        case 15: try decoder.decodeSingularStringField(value: &_storage._operatingSystem)
        case 16: try decoder.decodeSingularFloatField(value: &_storage._userLatitude)
        case 17: try decoder.decodeSingularFloatField(value: &_storage._userLongitude)
        case 18: try decoder.decodeSingularStringField(value: &_storage._userPhone)
        case 19: try decoder.decodeSingularStringField(value: &_storage._appVersion)
        case 20: try decoder.decodeSingularStringField(value: &_storage._internalUserID)
        case 21: try decoder.decodeSingularStringField(value: &_storage._deviceOs)
        case 22: try decoder.decodeSingularStringField(value: &_storage._deviceID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._eventID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._globalClientTimestamp {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._localClientTimestamp {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._localClientTimezone {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._firstName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._lastName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._email {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      }
      if let v = _storage._phone {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      }
      if let v = _storage._mc {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      }
      if let v = _storage._dot {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      }
      if let v = _storage._expectedRpm {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      }
      if let v = _storage._firstOpenDate {
        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
      }
      if let v = _storage._lastOpenDate {
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      }
      if let v = _storage._signUpDate {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      }
      if let v = _storage._operatingSystem {
        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
      }
      if let v = _storage._userLatitude {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 16)
      }
      if let v = _storage._userLongitude {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 17)
      }
      if let v = _storage._userPhone {
        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
      }
      if let v = _storage._appVersion {
        try visitor.visitSingularStringField(value: v, fieldNumber: 19)
      }
      if let v = _storage._internalUserID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 20)
      }
      if let v = _storage._deviceOs {
        try visitor.visitSingularStringField(value: v, fieldNumber: 21)
      }
      if let v = _storage._deviceID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CommonProperties: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "event_id", json: "event id"),
    2: .unique(proto: "global_client_timestamp", json: "Global Client Timestamp"),
    3: .unique(proto: "local_client_timestamp", json: "Local Client Timestamp"),
    4: .unique(proto: "local_client_timezone", json: "Local Client Time Zone"),
    5: .unique(proto: "first_name", json: "$first_name"),
    6: .unique(proto: "last_name", json: "$last_name"),
    7: .unique(proto: "email", json: "$email"),
    8: .unique(proto: "Phone", json: "$phone"),
    9: .unique(proto: "mc", json: "MC"),
    10: .unique(proto: "dot", json: "DOT"),
    11: .unique(proto: "expected_rpm", json: "expected rpm"),
    12: .unique(proto: "first_open_date", json: "First Open Date"),
    13: .unique(proto: "last_open_date", json: "Last Open Date"),
    14: .unique(proto: "sign_up_date", json: "Sign Up Date"),
    15: .unique(proto: "operating_system", json: "Operating System"),
    16: .unique(proto: "user_latitude", json: "User Latitude"),
    17: .unique(proto: "user_longitude", json: "User Longitude"),
    18: .unique(proto: "user_phone", json: "user phone"),
    19: .unique(proto: "app_version", json: "App Version"),
    20: .unique(proto: "internal_user_id", json: "Internal User ID"),
    21: .unique(proto: "device_os", json: "Device O/S"),
    22: .unique(proto: "device_id", json: "Device ID"),
  ]

  fileprivate class _StorageClass {
    var _eventID: String? = nil
    var _globalClientTimestamp: String? = nil
    var _localClientTimestamp: String? = nil
    var _localClientTimezone: String? = nil
    var _firstName: String? = nil
    var _lastName: String? = nil
    var _email: String? = nil
    var _phone: String? = nil
    var _mc: String? = nil
    var _dot: String? = nil
    var _expectedRpm: Float? = nil
    var _firstOpenDate: String? = nil
    var _lastOpenDate: String? = nil
    var _signUpDate: String? = nil
    var _operatingSystem: String? = nil
    var _userLatitude: Float? = nil
    var _userLongitude: Float? = nil
    var _userPhone: String? = nil
    var _appVersion: String? = nil
    var _internalUserID: String? = nil
    var _deviceOs: String? = nil
    var _deviceID: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eventID = source._eventID
      _globalClientTimestamp = source._globalClientTimestamp
      _localClientTimestamp = source._localClientTimestamp
      _localClientTimezone = source._localClientTimezone
      _firstName = source._firstName
      _lastName = source._lastName
      _email = source._email
      _phone = source._phone
      _mc = source._mc
      _dot = source._dot
      _expectedRpm = source._expectedRpm
      _firstOpenDate = source._firstOpenDate
      _lastOpenDate = source._lastOpenDate
      _signUpDate = source._signUpDate
      _operatingSystem = source._operatingSystem
      _userLatitude = source._userLatitude
      _userLongitude = source._userLongitude
      _userPhone = source._userPhone
      _appVersion = source._appVersion
      _internalUserID = source._internalUserID
      _deviceOs = source._deviceOs
      _deviceID = source._deviceID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: CommonProperties) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._eventID != other_storage._eventID {return false}
        if _storage._globalClientTimestamp != other_storage._globalClientTimestamp {return false}
        if _storage._localClientTimestamp != other_storage._localClientTimestamp {return false}
        if _storage._localClientTimezone != other_storage._localClientTimezone {return false}
        if _storage._firstName != other_storage._firstName {return false}
        if _storage._lastName != other_storage._lastName {return false}
        if _storage._email != other_storage._email {return false}
        if _storage._phone != other_storage._phone {return false}
        if _storage._mc != other_storage._mc {return false}
        if _storage._dot != other_storage._dot {return false}
        if _storage._expectedRpm != other_storage._expectedRpm {return false}
        if _storage._firstOpenDate != other_storage._firstOpenDate {return false}
        if _storage._lastOpenDate != other_storage._lastOpenDate {return false}
        if _storage._signUpDate != other_storage._signUpDate {return false}
        if _storage._operatingSystem != other_storage._operatingSystem {return false}
        if _storage._userLatitude != other_storage._userLatitude {return false}
        if _storage._userLongitude != other_storage._userLongitude {return false}
        if _storage._userPhone != other_storage._userPhone {return false}
        if _storage._appVersion != other_storage._appVersion {return false}
        if _storage._internalUserID != other_storage._internalUserID {return false}
        if _storage._deviceOs != other_storage._deviceOs {return false}
        if _storage._deviceID != other_storage._deviceID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
